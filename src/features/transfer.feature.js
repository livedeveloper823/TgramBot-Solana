
const { getHttpEndpoint } =  require("@orbs-network/ton-access");
const TonWeb = require('tonweb');

const tonweb = new TonWeb()
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
const transferLamports = async (wallet, toaddress, lamports) => {
    const endpoint = await getHttpEndpoint();
    console.log(toaddress)
    console.log(1)
    const provider = new TonWeb.HttpProvider(endpoint);
    const WalletClass = tonweb.wallet.all.v3R2; // or another wallet class depending on your needs
    console.log(1)
    const payer = new WalletClass(provider, {publicKey: TonWeb.utils.hexToBytes(wallet.publicKey)});
    const seqno = await payer.methods.seqno().call();
    const transfer=payer.methods.transfer({
      secretKey: TonWeb.utils.hexToBytes(wallet.secretKey), // Convert secret key to byte array if it's in hex
      toAddress: toaddress, // Destination address for the swap
      amount: new TonWeb.utils.BN(lamports), // Amount of tokens to send as part of the swap
      seqno: 0, // Current sequence number of the wallet
      payload: "widrawal", // Payload generated by buildSwapJettonTxParams
      // A send mode that fits the transaction; often 3 is used for sending with bounce protection
  })
  console.log(transfer)
    await sleep(1500)
    const balance=await tonweb.getBalance(wallet.address);
    console.log(balance)
    console.log(lamports)
  try {

    fees = (await transfer.estimateFee()).source_fees
    console.log((fees.fwd_fee+fees.gas_fee+fees.in_fwd_fee+fees.storage_fee))
    if (balance -(fees.fwd_fee+fees.gas_fee+fees.in_fwd_fee+fees.storage_fee)-0.009*1e9< lamports||lamports<0) {
      console.log('Insufient balance for init transaction...');
      console.log(`Current balance is ${balance} lamports`);
      console.log(`Request balance is ${lamports} lamports`);
      return {response:"no",fees:(fees.fwd_fee+fees.gas_fee+fees.in_fwd_fee+fees.storage_fee)};
    }
    
  transfer.send()
    
   
   

    
  } catch (error) {
    console.error(`Error in transfer.js: ${error.message}`);
  }
};

module.exports = {
  transferLamports,
};
